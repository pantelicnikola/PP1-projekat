package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;


import rs.etf.pp1.symboltable.Tab;
import rs.etf.pp1.symboltable.concepts.*;

import rs.ac.bg.etf.pp1.impl.CompilerImpl;

import rs.etf.pp1.mj.runtime.Code;

parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info (msg.toString());
    }
:}


scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

init with {:
	Tab.init(); // Universe scope
:}

action code {:
	CompilerImpl impl = new CompilerImpl();
:}


terminal PROGRAM, LBRACE, RBRACE, LPAREN, RPAREN, LBRACKET, RBRACKET, STATIC, VOID, EQUALS, SEMI_COLON, NEW, PRINT, READ, RETURN ; 
terminal CLASS, CONST, INC, DEC, IF, FOR, EXTENDS, CONTINUE, AND, OR, COMMA, DOT, BREAK ; 
terminal IS_EQUAL, IS_NOT_EQUAL, GREATER, LOWER, GREATER_EQUAL, LOWER_EQUAL, PLUS, MINUS, PLUS_EQUAL, MINUS_EQUAL; 
terminal TIMES, DIVIDE, MODULE, TIMES_EQUAL, DIVIDE_EQUAL, MODULE_EQUAL, ELSE ;
terminal Integer NUM_CONST;
terminal Character CHAR_CONST;
terminal Boolean BOOL_CONST;
terminal String IDENT;
 

non terminal Program, DeclList, Decls ;
non terminal MethodDecl, MethodReturnType, MethodDeclList, MethodFormPars, FormPars, FormPar;   
non terminal VarDecl, VarDecls, VarPar;
non terminal LocalVarDecl, LocalVarDecls, LocalVarPar, LocalVarDeclList;
non terminal ClassDecl, ExtendsType, ClassMethods;
non terminal ConstDecl, Const, ConstDecls, ConstPar;
non terminal Statement, StatementList, ForDesignatorStatement, ForCondition;
non terminal DesignatorStatement, DesignatorAssignStatement ;
non terminal Condition, CondTerm, CondFact ;
non terminal ActPars ;
non terminal Obj Term, Terms, TermsWrapper, Expr;
non terminal Obj Factor ;
non terminal Obj Designator ;
non terminal DesignatorNesto ;
non terminal Integer Assignop, Relop, AddopLeft, AddopRight, MulopLeft, MulopRight ;
non terminal Struct Type ;


precedence left ELSE ;



Program ::= PROGRAM IDENT:programName {: impl.startProgram(programName); :} DeclList LBRACE MethodDeclList RBRACE {: impl.endProgram(); :};

DeclList ::= DeclList Decls
			 |
			 /* epsilon */ 
			 ;

Decls ::= ConstDecl 
		  | 
		  VarDecl 
		  | 
		  ClassDecl ;
		 
		 
		 
		 
		 
		 
		 
		 
		 
ConstDecl ::= CONST Type:constType {: impl.setType(constType); :} ConstDecls SEMI_COLON ;

Const ::= NUM_CONST:num {: RESULT = num; :}
		  |
		  BOOL_CONST:bool {: RESULT = bool; :}
		  |
		  CHAR_CONST:chr {: RESULT = chr; :} ;
		  
ConstPar ::= IDENT:constName EQUALS Const:constValue {: impl.insertConstant(constName,constValue,constNameleft); :} ;

ConstDecls ::= ConstPar COMMA ConstDecls
			   |
			   ConstPar ;		







VarDecl ::= Type:type {: impl.setType(type); :} VarDecls SEMI_COLON 
			|
			error SEMI_COLON
			{: parser.log.debug("Uspesan oporavak od greske pri deklarisanju globalne promenljive."); :};

VarDecls ::= VarDecls COMMA VarPar 
			 |
			 VarPar
			 |
			 error 
			 {: parser.log.debug("Uspesan oporavak od greske pri deklarisanju globalne promenljive."); :};
			   
VarPar ::= IDENT:varName {: impl.insertGlobalVar(varName,varNameleft); :} 
		   |
		   IDENT:varName LBRACKET RBRACKET {: impl.insertGlobalArray(varName,varNameleft); :} ;
				
				
				
				
				
				
LocalVarDecl ::= Type:varType {: impl.setType(varType); :} LocalVarDecls SEMI_COLON 
				 |
				 error SEMI_COLON
				 {: parser.log.debug("Uspesan oporavak od greske pri deklarisanju lokalne promenljive."); :}
				 |
				 error
				 {: parser.log.debug("Uspesan oporavak od greske pri deklarisanju lokalne promenljive."); :}
				 ; 

LocalVarDecls ::= LocalVarPar COMMA LocalVarDecls
			 	  |
				  LocalVarPar ;
			   
LocalVarPar ::= IDENT:varName {: impl.insertLocalVar(varName,varNameleft); :} 
		   		|
		        IDENT:varName LBRACKET RBRACKET {: impl.insertLocalArray(varName,varNameleft); :} ;
		   
LocalVarDeclList ::= LocalVarDeclList LocalVarDecl
					 |
					 /* epsilon */
					 ;  
	
		   
		   
		   
				
ClassDecl ::= CLASS IDENT:className {: impl.insertClass(className,classNameleft); :} 
			  ExtendsType LBRACE LocalVarDeclList ClassMethods RBRACE {: impl.endClass(); :}; 

ExtendsType ::= EXTENDS Type
			   |
			   /* epsilon */
			   ;

ClassMethods ::= LBRACE MethodDeclList RBRACE
				 |
			     /* epsilon */
			     ;




 
		 
		 

MethodDecl ::= MethodReturnType LPAREN MethodFormPars RPAREN LocalVarDeclList LBRACE {: impl.startMethod(); :} StatementList RBRACE {: impl.endMethod(); :} ;

MethodReturnType ::= Type:retType IDENT:methName  {: impl.insertMethod(retType,methName,methNameleft); :}
					 |
					 STATIC Type:retType IDENT:methName  {: impl.insertMethod(retType,methName,methNameleft); :}
					 |
					 VOID IDENT:methName  {: impl.insertMethod(null,methName,methNameleft); :}
					 |
					 STATIC VOID IDENT:methName  {: impl.insertMethod(null,methName,methNameleft); :} ;
					  
MethodDeclList ::= MethodDeclList MethodDecl 
				   |
				   /* epsilon */
				   ;
				   
MethodFormPars ::= FormPars {: impl.checkIfMain(); :}
				   |
				   /* epsilon */
				   ;
				   
FormPars ::= FormPar COMMA FormPars
			 |
			 FormPar ;

FormPar ::= Type:argType IDENT:argVar {: impl.insertMethodArg(argType, argVar, argVarleft); :}
			|
			Type:argType IDENT:argVar {: impl.insertMethodArg(argType, argVar, argVarleft); :} LBRACKET RBRACKET;  

				  







			
			
			

Type ::= IDENT:typeName {: RESULT = impl.getType(typeName,typeNameleft); :};








Statement ::= DesignatorStatement SEMI_COLON:semi
			  |
			  IF LPAREN Condition RPAREN Statement 
			  |
			  IF LPAREN Condition RPAREN Statement ELSE Statement 
			  |
			  FOR LPAREN ForDesignatorStatement SEMI_COLON ForCondition SEMI_COLON ForDesignatorStatement RPAREN {: impl.inForLoop = true; :} Statement {: impl.inForLoop = false; :}
			  |
			  BREAK SEMI_COLON:semi {: impl.checkInForLoopBreak(semileft); :}
			  |
			  CONTINUE SEMI_COLON:semi {: impl.checkInForLoopContinue(semileft); :}
			  | 
			  RETURN:a Expr:expr {: impl.checkReturn(expr,aleft); :} SEMI_COLON
			  |
			  RETURN:a {: impl.checkReturn(null,aleft); :} SEMI_COLON
			  |
			  READ LPAREN Designator:des RPAREN SEMI_COLON {: impl.read(des,desleft); :}
			  |
			  PRINT LPAREN Expr:exp COMMA NUM_CONST:num RPAREN SEMI_COLON {: impl.print(exp,num,expleft); :}    
			  |
			  PRINT LPAREN Expr:exp RPAREN SEMI_COLON {: impl.print(exp,-1,expleft); :}    
			  |
			  LBRACE StatementList RBRACE ;

StatementList ::= StatementList Statement
				  |
				  /* epsilon */
		 		  ;
				  
ForDesignatorStatement ::= DesignatorStatement
						   |
						   /* epsilon */
						   ;	

ForCondition ::= Condition
				 |
				 /* epsilon */
				 ;	
				 
				
				
				
				
				
				
				

DesignatorStatement ::= DesignatorAssignStatement
						|
						Designator LPAREN RPAREN
						|
						Designator LPAREN ActPars RPAREN
						|
						Designator:des INC {: impl.checkDesignatorInt(des, desleft); :}
						|
						Designator:des DEC {: impl.checkDesignatorDec(des, desleft); :};

DesignatorAssignStatement ::= IDENT:name DesignatorNesto:ref {: impl.setLDesignatorReference(name, ref); :} Assignop:op Expr:expr 
							  {: impl.execAssign(name, expr, ref, op, opleft); :}
							  |
							  error
							  {: parser.log.debug("Uspesan oporavak od greske pri dodeli vrednosti."); :};
							 

			
ActPars ::= Expr COMMA ActPars 
			|
			Expr ;
							 




Condition ::= CondTerm OR Condition 
			  |
			  CondTerm:condTerm {: RESULT = condTerm; :} ;
			  
CondTerm ::= CondFact AND CondTerm
			 |
			 CondFact:condFact {: RESULT = condFact; :} ;
			 
CondFact ::= Expr:left Relop:relop Expr:right {: RESULT = impl.compare(left,right, relop, rightleft); :}
			 |
			 Expr:expr {: RESULT = expr; :} ;





Expr ::= MINUS TermsWrapper:termsWrapper {: RESULT = termsWrapper; :}
		 |
		 TermsWrapper:termsWrapper {: RESULT = termsWrapper; :} ;


Term ::= Factor:factor {: RESULT = factor; :}
		 |
		 Term:term MulopLeft:op Factor:factor {: RESULT = impl.execMulopLeft(term, factor, op, opleft); :} ;
		 
Terms ::= Term:term {: RESULT = term; :}
		  |
		  Terms:terms AddopLeft:op Term:term {: RESULT = impl.execAddopLeft(terms, term, op, opleft); :} ;
		  
TermsWrapper ::= Terms:terms {: RESULT = terms; :}
				 |
				 Terms:terms AddopRight:op TermsWrapper:termsWrapper {: RESULT = impl.execAddopRight(terms, termsWrapper, op, opleft); :}
				 |
				 Terms:terms MulopRight:op TermsWrapper:termsWrapper {: RESULT = impl.execMulopRight(terms, termsWrapper, op, opleft); :} ;












//r-value

Factor ::= Designator:des {: RESULT = des; impl.setArrayOnStack(des); :}
		   | 
	 	   Designator:des LPAREN ActPars RPAREN {: RESULT = impl.factorInsertFunc(des,desleft); :}
		   |
		   Designator:des LPAREN RPAREN {: RESULT = impl.factorInsertFunc(des,desleft); :}
		   |
		   NUM_CONST:num {: RESULT = impl.factorInsertNum(num); :}
		   |
		   CHAR_CONST:chr {: RESULT = impl.factorInsertChar(chr); :}
		   |
		   BOOL_CONST:bool {: RESULT = impl.factorInsertBool(bool); :}
		   |
		   NEW Type:type {: RESULT = impl.checkNewType(type, null, typeleft); :}
		   |
		   NEW Type:type LBRACKET Expr:expr RBRACKET {: RESULT = impl.checkNewType(type, expr, typeleft); :} 
		   |
		   LPAREN Expr:exp RPAREN {: RESULT = exp; :} ;
		 


		 





Designator ::= IDENT:name DesignatorNesto:ref {: RESULT = impl.findDesignator(name, ref, nameleft); :} ;

DesignatorNesto ::= DOT IDENT DesignatorNesto {: RESULT = null; :}
					|
					LBRACKET Expr RBRACKET  DesignatorNesto	{: RESULT = "deReferenced"; :}
					|
					/* epsilon */ {: RESULT = null; :}
					;
					


 
Assignop ::= EQUALS {: RESULT = new Integer(0); :}  
			 |
			 AddopRight:ar {: RESULT = ar; :}
			 |
			 MulopRight:mr {: RESULT = mr; :} ;
			 
Relop ::= IS_EQUAL {: RESULT = new Integer(Code.eq); :}
		  |
		  IS_NOT_EQUAL {: RESULT = new Integer(Code.ne); :}
		  |
		  GREATER {: RESULT = new Integer(Code.gt); :}
		  |
		  GREATER_EQUAL {: RESULT = new Integer(Code.ge); :}
		  |
		  LOWER {: RESULT = new Integer(Code.lt); :}
		  |
		  LOWER_EQUAL {: RESULT = new Integer(Code.le); :};
		  
AddopLeft ::= PLUS {: RESULT = new Integer(Code.add); :}
			  |
			  MINUS {: RESULT = new Integer(Code.sub); :} ;
			  
AddopRight ::= PLUS_EQUAL {: RESULT = new Integer(Code.add); :}
			   |
			   MINUS_EQUAL {: RESULT = new Integer(Code.sub); :} ;
		  
MulopLeft ::= TIMES {: RESULT = new Integer(Code.mul); :}
			  |
			  DIVIDE {: RESULT = new Integer(Code.div); :}
			  |
			  MODULE {: RESULT = new Integer(Code.rem); :};
			  
MulopRight ::= TIMES_EQUAL {: RESULT = new Integer(Code.mul); :}
			   |
			   DIVIDE_EQUAL {: RESULT = new Integer(Code.div); :}
			   |
			   MODULE_EQUAL {: RESULT = new Integer(Code.rem); :};
