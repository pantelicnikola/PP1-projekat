
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Jan 30 16:47:58 CET 2017
//----------------------------------------------------

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.etf.pp1.symboltable.Tab;
import rs.etf.pp1.symboltable.concepts.*;
import rs.ac.bg.etf.pp1.impl.CompilerImpl;
import rs.etf.pp1.mj.runtime.Code;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Jan 30 16:47:58 CET 2017
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\213\000\002\064\002\000\002\002\011\000\002\002" +
    "\004\000\002\003\004\000\002\003\002\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\065\002\000" +
    "\002\026\007\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\031\005\000\002\030\005\000\002\030" +
    "\003\000\002\066\002\000\002\013\006\000\002\013\004" +
    "\000\002\014\005\000\002\014\003\000\002\014\003\000" +
    "\002\015\003\000\002\015\005\000\002\016\004\000\002" +
    "\016\002\000\002\067\002\000\002\017\006\000\002\017" +
    "\004\000\002\017\003\000\002\020\005\000\002\020\003" +
    "\000\002\021\003\000\002\021\005\000\002\022\004\000" +
    "\002\022\002\000\002\070\002\000\002\023\012\000\002" +
    "\024\004\000\002\024\002\000\002\025\005\000\002\025" +
    "\002\000\002\071\002\000\002\005\013\000\002\006\004" +
    "\000\002\006\005\000\002\006\004\000\002\006\005\000" +
    "\002\007\004\000\002\007\002\000\002\010\003\000\002" +
    "\010\002\000\002\011\005\000\002\011\003\000\002\012" +
    "\004\000\002\072\002\000\002\012\007\000\002\063\003" +
    "\000\002\032\004\000\002\032\007\000\002\032\011\000" +
    "\002\032\013\000\002\032\004\000\002\032\004\000\002" +
    "\073\002\000\002\032\006\000\002\074\002\000\002\032" +
    "\005\000\002\075\002\000\002\032\010\000\002\032\011" +
    "\000\002\032\007\000\002\032\005\000\002\033\004\000" +
    "\002\033\002\000\002\034\003\000\002\034\002\000\002" +
    "\035\003\000\002\035\002\000\002\036\003\000\002\036" +
    "\005\000\002\036\006\000\002\036\004\000\002\036\004" +
    "\000\002\037\005\000\002\037\003\000\002\043\005\000" +
    "\002\043\003\000\002\040\005\000\002\040\003\000\002" +
    "\041\005\000\002\041\003\000\002\042\005\000\002\042" +
    "\003\000\002\044\005\000\002\044\004\000\002\045\005" +
    "\000\002\045\002\000\002\046\004\000\002\047\005\000" +
    "\002\047\002\000\002\050\003\000\002\050\006\000\002" +
    "\050\005\000\002\050\003\000\002\050\003\000\002\050" +
    "\003\000\002\050\004\000\002\050\007\000\002\050\005" +
    "\000\002\076\002\000\002\051\005\000\002\077\002\000" +
    "\002\052\006\000\002\052\006\000\002\052\002\000\002" +
    "\053\003\000\002\053\003\000\002\053\003\000\002\054" +
    "\003\000\002\054\003\000\002\054\003\000\002\054\003" +
    "\000\002\054\003\000\002\054\003\000\002\055\003\000" +
    "\002\055\003\000\002\056\003\000\002\056\003\000\002" +
    "\057\003\000\002\057\003\000\002\060\003\000\002\060" +
    "\003\000\002\061\003\000\002\061\003\000\002\061\003" +
    "\000\002\062\003\000\002\062\003\000\002\062\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\346\000\004\004\005\001\002\000\004\002\350\001" +
    "\002\000\004\064\006\001\002\000\014\003\001\005\001" +
    "\023\001\024\001\064\001\001\002\000\014\003\ufffd\005" +
    "\ufffd\023\ufffd\024\ufffd\064\ufffd\001\002\000\014\003\017" +
    "\005\012\023\021\024\022\064\013\001\002\000\006\003" +
    "\ufff1\064\ufff1\001\002\000\012\006\uffd0\013\uffd0\014\uffd0" +
    "\064\uffd0\001\002\000\066\003\uffc8\005\uffc8\010\uffc8\011" +
    "\uffc8\012\uffc8\016\uffc8\033\uffc8\034\uffc8\035\uffc8\040\uffc8" +
    "\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8\047" +
    "\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8\055\uffc8" +
    "\056\uffc8\057\uffc8\064\uffc8\001\002\000\014\003\ufffb\005" +
    "\ufffb\023\ufffb\024\ufffb\064\ufffb\001\002\000\014\003\ufffa" +
    "\005\ufffa\023\ufffa\024\ufffa\064\ufffa\001\002\000\014\003" +
    "\ufffe\005\ufffe\023\ufffe\024\ufffe\064\ufffe\001\002\000\004" +
    "\016\333\001\002\000\014\003\ufffc\005\ufffc\023\ufffc\024" +
    "\ufffc\064\ufffc\001\002\000\004\064\040\001\002\000\004" +
    "\064\013\001\002\000\004\064\ufff9\001\002\000\004\064" +
    "\027\001\002\000\004\016\037\001\002\000\006\016\ufff2" +
    "\035\035\001\002\000\004\015\030\001\002\000\010\061" +
    "\032\062\034\063\031\001\002\000\006\016\ufff6\035\ufff6" +
    "\001\002\000\006\016\ufff7\035\ufff7\001\002\000\006\016" +
    "\ufff4\035\ufff4\001\002\000\006\016\ufff5\035\ufff5\001\002" +
    "\000\004\064\027\001\002\000\004\016\ufff3\001\002\000" +
    "\014\003\ufff8\005\ufff8\023\ufff8\024\ufff8\064\ufff8\001\002" +
    "\000\006\005\uffdd\031\uffdd\001\002\000\006\005\uffda\031" +
    "\042\001\002\000\004\064\013\001\002\000\004\005\044" +
    "\001\002\000\012\003\uffe8\005\uffe8\006\uffe8\064\uffe8\001" +
    "\002\000\012\003\017\005\046\006\uffd8\064\013\001\002" +
    "\000\012\006\uffd0\013\uffd0\014\uffd0\064\uffd0\001\002\000" +
    "\012\003\uffe9\005\uffe9\006\uffe9\064\uffe9\001\002\000\004" +
    "\006\051\001\002\000\014\003\uffdc\005\uffdc\023\uffdc\024" +
    "\uffdc\064\uffdc\001\002\000\012\006\056\013\055\014\060" +
    "\064\013\001\002\000\004\007\067\001\002\000\004\064" +
    "\066\001\002\000\006\014\063\064\013\001\002\000\004" +
    "\006\uffd9\001\002\000\012\006\uffd1\013\uffd1\014\uffd1\064" +
    "\uffd1\001\002\000\004\064\061\001\002\000\004\007\uffd3" +
    "\001\002\000\004\064\065\001\002\000\004\064\064\001" +
    "\002\000\004\007\uffd2\001\002\000\004\007\uffd4\001\002" +
    "\000\004\007\uffd5\001\002\000\006\010\uffce\064\013\001" +
    "\002\000\004\064\326\001\002\000\004\010\uffcf\001\002" +
    "\000\006\010\uffcc\035\324\001\002\000\004\010\074\001" +
    "\002\000\010\003\uffde\005\uffde\064\uffde\001\002\000\010" +
    "\003\101\005\076\064\013\001\002\000\030\003\uffd7\005" +
    "\uffd7\006\uffd7\020\uffd7\021\uffd7\022\uffd7\027\uffd7\030\uffd7" +
    "\032\uffd7\037\uffd7\064\uffd7\001\002\000\010\003\uffdf\005" +
    "\uffdf\064\uffdf\001\002\000\004\064\uffe7\001\002\000\012" +
    "\003\uffe4\005\uffe4\016\102\064\uffe4\001\002\000\010\003" +
    "\uffe5\005\uffe5\064\uffe5\001\002\000\004\064\105\001\002" +
    "\000\004\016\113\001\002\000\010\011\111\016\uffe1\035" +
    "\uffe1\001\002\000\006\016\uffe2\035\107\001\002\000\004" +
    "\064\105\001\002\000\004\016\uffe3\001\002\000\004\012" +
    "\112\001\002\000\006\016\uffe0\035\uffe0\001\002\000\010" +
    "\003\uffe6\005\uffe6\064\uffe6\001\002\000\030\003\uffb7\005" +
    "\uffb7\006\uffb7\020\uffb7\021\uffb7\022\uffb7\027\uffb7\030\uffb7" +
    "\032\uffb7\037\uffb7\064\uffb7\001\002\000\030\003\127\005" +
    "\117\006\133\020\130\021\116\022\132\027\124\030\122" +
    "\032\131\037\134\064\120\001\002\000\004\007\317\001" +
    "\002\000\030\003\uffb7\005\uffb7\006\uffb7\020\uffb7\021\uffb7" +
    "\022\uffb7\027\uffb7\030\uffb7\032\uffb7\037\uffb7\064\uffb7\001" +
    "\002\000\072\007\uff93\010\uff93\011\uff93\012\uff93\015\uff93" +
    "\016\uff93\025\uff93\026\uff93\033\uff93\034\uff93\035\uff93\036" +
    "\uff93\040\uff93\041\uff93\042\uff93\043\uff93\044\uff93\045\uff93" +
    "\046\uff93\047\uff93\050\uff93\051\uff93\052\uff93\053\uff93\054" +
    "\uff93\055\uff93\056\uff93\057\uff93\001\002\000\006\010\uffb2" +
    "\016\uffb2\001\002\000\004\007\271\001\002\000\024\007" +
    "\264\015\263\025\261\026\262\050\174\051\170\055\160" +
    "\056\162\057\161\001\002\000\004\007\231\001\002\000" +
    "\030\003\uffb8\005\uffb8\006\uffb8\020\uffb8\021\uffb8\022\uffb8" +
    "\027\uffb8\030\uffb8\032\uffb8\037\uffb8\064\uffb8\001\002\000" +
    "\004\016\230\001\002\000\006\010\uffac\016\uffac\001\002" +
    "\000\004\007\220\001\002\000\004\016\217\001\002\000" +
    "\022\007\147\016\uffbf\017\140\047\136\061\142\062\146" +
    "\063\143\064\120\001\002\000\012\006\uffd6\013\uffd6\014" +
    "\uffd6\064\uffd6\001\002\000\004\016\135\001\002\000\032" +
    "\003\uffc3\005\uffc3\006\uffc3\020\uffc3\021\uffc3\022\uffc3\027" +
    "\uffc3\030\uffc3\032\uffc3\037\uffc3\060\uffc3\064\uffc3\001\002" +
    "\000\016\007\147\017\140\061\142\062\146\063\143\064" +
    "\120\001\002\000\004\016\uffc1\001\002\000\004\064\013" +
    "\001\002\000\060\007\200\010\uff9c\012\uff9c\016\uff9c\033" +
    "\uff9c\034\uff9c\035\uff9c\040\uff9c\041\uff9c\042\uff9c\043\uff9c" +
    "\044\uff9c\045\uff9c\046\uff9c\047\uff9c\050\uff9c\051\uff9c\052" +
    "\uff9c\053\uff9c\054\uff9c\055\uff9c\056\uff9c\057\uff9c\001\002" +
    "\000\056\010\uff99\012\uff99\016\uff99\033\uff99\034\uff99\035" +
    "\uff99\040\uff99\041\uff99\042\uff99\043\uff99\044\uff99\045\uff99" +
    "\046\uff99\047\uff99\050\uff99\051\uff99\052\uff99\053\uff99\054" +
    "\uff99\055\uff99\056\uff99\057\uff99\001\002\000\056\010\uff97" +
    "\012\uff97\016\uff97\033\uff97\034\uff97\035\uff97\040\uff97\041" +
    "\uff97\042\uff97\043\uff97\044\uff97\045\uff97\046\uff97\047\uff97" +
    "\050\uff97\051\uff97\052\uff97\053\uff97\054\uff97\055\uff97\056" +
    "\uff97\057\uff97\001\002\000\042\010\uffa0\012\uffa0\016\uffa0" +
    "\033\uffa0\034\uffa0\035\uffa0\040\uffa0\041\uffa0\042\uffa0\043" +
    "\uffa0\044\uffa0\045\uffa0\046\uffa0\047\uffa0\050\uffa0\051\uffa0" +
    "\001\002\000\056\010\uff9d\012\uff9d\016\uff9d\033\uff9d\034" +
    "\uff9d\035\uff9d\040\uff9d\041\uff9d\042\uff9d\043\uff9d\044\uff9d" +
    "\045\uff9d\046\uff9d\047\uff9d\050\uff9d\051\uff9d\052\uff9d\053" +
    "\uff9d\054\uff9d\055\uff9d\056\uff9d\057\uff9d\001\002\000\056" +
    "\010\uff98\012\uff98\016\uff98\033\uff98\034\uff98\035\uff98\040" +
    "\uff98\041\uff98\042\uff98\043\uff98\044\uff98\045\uff98\046\uff98" +
    "\047\uff98\050\uff98\051\uff98\052\uff98\053\uff98\054\uff98\055" +
    "\uff98\056\uff98\057\uff98\001\002\000\020\007\147\017\140" +
    "\047\136\061\142\062\146\063\143\064\120\001\002\000" +
    "\004\016\151\001\002\000\032\003\uffbe\005\uffbe\006\uffbe" +
    "\020\uffbe\021\uffbe\022\uffbe\027\uffbe\030\uffbe\032\uffbe\037" +
    "\uffbe\060\uffbe\064\uffbe\001\002\000\004\010\153\001\002" +
    "\000\056\010\uff94\012\uff94\016\uff94\033\uff94\034\uff94\035" +
    "\uff94\040\uff94\041\uff94\042\uff94\043\uff94\044\uff94\045\uff94" +
    "\046\uff94\047\uff94\050\uff94\051\uff94\052\uff94\053\uff94\054" +
    "\uff94\055\uff94\056\uff94\057\uff94\001\002\000\056\010\uff9f" +
    "\012\uff9f\016\uff9f\033\uff9f\034\uff9f\035\uff9f\040\uff9f\041" +
    "\uff9f\042\uff9f\043\uff9f\044\uff9f\045\uff9f\046\uff9f\047\uff9f" +
    "\050\uff9f\051\uff9f\052\163\053\156\054\157\055\160\056" +
    "\162\057\161\001\002\000\016\007\uff7d\017\uff7d\061\uff7d" +
    "\062\uff7d\063\uff7d\064\uff7d\001\002\000\016\007\uff7b\017" +
    "\uff7b\061\uff7b\062\uff7b\063\uff7b\064\uff7b\001\002\000\016" +
    "\007\uff7a\017\uff7a\061\uff7a\062\uff7a\063\uff7a\064\uff7a\001" +
    "\002\000\020\007\uff79\017\uff79\047\uff79\061\uff79\062\uff79" +
    "\063\uff79\064\uff79\001\002\000\020\007\uff77\017\uff77\047" +
    "\uff77\061\uff77\062\uff77\063\uff77\064\uff77\001\002\000\020" +
    "\007\uff78\017\uff78\047\uff78\061\uff78\062\uff78\063\uff78\064" +
    "\uff78\001\002\000\016\007\uff7c\017\uff7c\061\uff7c\062\uff7c" +
    "\063\uff7c\064\uff7c\001\002\000\016\007\147\017\140\061" +
    "\142\062\146\063\143\064\120\001\002\000\016\007\uff7e" +
    "\017\uff7e\061\uff7e\062\uff7e\063\uff7e\064\uff7e\001\002\000" +
    "\056\010\uff9e\012\uff9e\016\uff9e\033\uff9e\034\uff9e\035\uff9e" +
    "\040\uff9e\041\uff9e\042\uff9e\043\uff9e\044\uff9e\045\uff9e\046" +
    "\uff9e\047\uff9e\050\uff9e\051\uff9e\052\uff9e\053\uff9e\054\uff9e" +
    "\055\uff9e\056\uff9e\057\uff9e\001\002\000\042\010\uffa2\012" +
    "\uffa2\016\uffa2\033\uffa2\034\uffa2\035\uffa2\040\uffa2\041\uffa2" +
    "\042\uffa2\043\uffa2\044\uffa2\045\uffa2\046\171\047\172\050" +
    "\174\051\170\001\002\000\020\007\uff7f\017\uff7f\047\uff7f" +
    "\061\uff7f\062\uff7f\063\uff7f\064\uff7f\001\002\000\016\007" +
    "\uff82\017\uff82\061\uff82\062\uff82\063\uff82\064\uff82\001\002" +
    "\000\016\007\uff81\017\uff81\061\uff81\062\uff81\063\uff81\064" +
    "\uff81\001\002\000\016\007\uff83\017\uff83\061\uff83\062\uff83" +
    "\063\uff83\064\uff83\001\002\000\020\007\uff80\017\uff80\047" +
    "\uff80\061\uff80\062\uff80\063\uff80\064\uff80\001\002\000\016" +
    "\007\147\017\140\061\142\062\146\063\143\064\120\001" +
    "\002\000\016\007\uff84\017\uff84\061\uff84\062\uff84\063\uff84" +
    "\064\uff84\001\002\000\042\010\uffa1\012\uffa1\016\uffa1\033" +
    "\uffa1\034\uffa1\035\uffa1\040\uffa1\041\uffa1\042\uffa1\043\uffa1" +
    "\044\uffa1\045\uffa1\046\uffa1\047\uffa1\050\uffa1\051\uffa1\001" +
    "\002\000\022\007\147\010\203\017\140\047\136\061\142" +
    "\062\146\063\143\064\120\001\002\000\004\010\206\001" +
    "\002\000\006\010\uffaa\035\204\001\002\000\056\010\uff9a" +
    "\012\uff9a\016\uff9a\033\uff9a\034\uff9a\035\uff9a\040\uff9a\041" +
    "\uff9a\042\uff9a\043\uff9a\044\uff9a\045\uff9a\046\uff9a\047\uff9a" +
    "\050\uff9a\051\uff9a\052\uff9a\053\uff9a\054\uff9a\055\uff9a\056" +
    "\uff9a\057\uff9a\001\002\000\020\007\147\017\140\047\136" +
    "\061\142\062\146\063\143\064\120\001\002\000\004\010" +
    "\uffab\001\002\000\056\010\uff9b\012\uff9b\016\uff9b\033\uff9b" +
    "\034\uff9b\035\uff9b\040\uff9b\041\uff9b\042\uff9b\043\uff9b\044" +
    "\uff9b\045\uff9b\046\uff9b\047\uff9b\050\uff9b\051\uff9b\052\uff9b" +
    "\053\uff9b\054\uff9b\055\uff9b\056\uff9b\057\uff9b\001\002\000" +
    "\060\010\uff96\011\210\012\uff96\016\uff96\033\uff96\034\uff96" +
    "\035\uff96\040\uff96\041\uff96\042\uff96\043\uff96\044\uff96\045" +
    "\uff96\046\uff96\047\uff96\050\uff96\051\uff96\052\uff96\053\uff96" +
    "\054\uff96\055\uff96\056\uff96\057\uff96\001\002\000\020\007" +
    "\147\017\140\047\136\061\142\062\146\063\143\064\120" +
    "\001\002\000\004\012\212\001\002\000\056\010\uff95\012" +
    "\uff95\016\uff95\033\uff95\034\uff95\035\uff95\040\uff95\041\uff95" +
    "\042\uff95\043\uff95\044\uff95\045\uff95\046\uff95\047\uff95\050" +
    "\uff95\051\uff95\052\uff95\053\uff95\054\uff95\055\uff95\056\uff95" +
    "\057\uff95\001\002\000\004\016\214\001\002\000\032\003" +
    "\uffc0\005\uffc0\006\uffc0\020\uffc0\021\uffc0\022\uffc0\027\uffc0" +
    "\030\uffc0\032\uffc0\037\uffc0\060\uffc0\064\uffc0\001\002\000" +
    "\042\010\uffa0\012\uffa0\016\uffa0\033\uffa0\034\uffa0\035\uffa0" +
    "\040\uffa0\041\uffa0\042\uffa0\043\uffa0\044\uffa0\045\uffa0\046" +
    "\uffa0\047\uffa0\050\uffa0\051\uffa0\001\002\000\042\010\uffa3" +
    "\012\uffa3\016\uffa3\033\uffa3\034\uffa3\035\uffa3\040\uffa3\041" +
    "\uffa3\042\uffa3\043\uffa3\044\uffa3\045\uffa3\046\171\047\172" +
    "\050\174\051\170\001\002\000\032\003\uffc2\005\uffc2\006" +
    "\uffc2\020\uffc2\021\uffc2\022\uffc2\027\uffc2\030\uffc2\032\uffc2" +
    "\037\uffc2\060\uffc2\064\uffc2\001\002\000\020\007\147\017" +
    "\140\047\136\061\142\062\146\063\143\064\120\001\002" +
    "\000\006\010\223\035\222\001\002\000\004\061\225\001" +
    "\002\000\004\016\224\001\002\000\032\003\uffba\005\uffba" +
    "\006\uffba\020\uffba\021\uffba\022\uffba\027\uffba\030\uffba\032" +
    "\uffba\037\uffba\060\uffba\064\uffba\001\002\000\004\010\226" +
    "\001\002\000\004\016\227\001\002\000\032\003\uffbb\005" +
    "\uffbb\006\uffbb\020\uffbb\021\uffbb\022\uffbb\027\uffbb\030\uffbb" +
    "\032\uffbb\037\uffbb\060\uffbb\064\uffbb\001\002\000\032\003" +
    "\uffc7\005\uffc7\006\uffc7\020\uffc7\021\uffc7\022\uffc7\027\uffc7" +
    "\030\uffc7\032\uffc7\037\uffc7\060\uffc7\064\uffc7\001\002\000" +
    "\020\007\147\017\140\047\136\061\142\062\146\063\143" +
    "\064\120\001\002\000\026\010\uffa4\016\uffa4\033\uffa4\034" +
    "\uffa4\040\253\041\252\042\247\043\250\044\251\045\246" +
    "\001\002\000\004\010\242\001\002\000\012\010\uffa6\016" +
    "\uffa6\033\240\034\uffa6\001\002\000\010\010\uffa8\016\uffa8" +
    "\034\236\001\002\000\020\007\147\017\140\047\136\061" +
    "\142\062\146\063\143\064\120\001\002\000\006\010\uffa9" +
    "\016\uffa9\001\002\000\020\007\147\017\140\047\136\061" +
    "\142\062\146\063\143\064\120\001\002\000\010\010\uffa7" +
    "\016\uffa7\034\uffa7\001\002\000\026\003\127\005\117\020" +
    "\130\021\116\022\132\027\124\030\122\032\131\037\134" +
    "\064\120\001\002\000\032\003\uffc6\005\uffc6\006\uffc6\020" +
    "\uffc6\021\uffc6\022\uffc6\027\uffc6\030\uffc6\032\uffc6\037\uffc6" +
    "\060\244\064\uffc6\001\002\000\026\003\127\005\117\020" +
    "\130\021\116\022\132\027\124\030\122\032\131\037\134" +
    "\064\120\001\002\000\032\003\uffc5\005\uffc5\006\uffc5\020" +
    "\uffc5\021\uffc5\022\uffc5\027\uffc5\030\uffc5\032\uffc5\037\uffc5" +
    "\060\uffc5\064\uffc5\001\002\000\020\007\uff85\017\uff85\047" +
    "\uff85\061\uff85\062\uff85\063\uff85\064\uff85\001\002\000\020" +
    "\007\uff88\017\uff88\047\uff88\061\uff88\062\uff88\063\uff88\064" +
    "\uff88\001\002\000\020\007\uff86\017\uff86\047\uff86\061\uff86" +
    "\062\uff86\063\uff86\064\uff86\001\002\000\020\007\uff87\017" +
    "\uff87\047\uff87\061\uff87\062\uff87\063\uff87\064\uff87\001\002" +
    "\000\020\007\uff89\017\uff89\047\uff89\061\uff89\062\uff89\063" +
    "\uff89\064\uff89\001\002\000\020\007\uff8a\017\uff8a\047\uff8a" +
    "\061\uff8a\062\uff8a\063\uff8a\064\uff8a\001\002\000\020\007" +
    "\147\017\140\047\136\061\142\062\146\063\143\064\120" +
    "\001\002\000\012\010\uffa5\016\uffa5\033\uffa5\034\uffa5\001" +
    "\002\000\020\007\uff8b\017\uff8b\047\uff8b\061\uff8b\062\uff8b" +
    "\063\uff8b\064\uff8b\001\002\000\020\007\uff8c\017\uff8c\047" +
    "\uff8c\061\uff8c\062\uff8c\063\uff8c\064\uff8c\001\002\000\020" +
    "\007\147\017\140\047\136\061\142\062\146\063\143\064" +
    "\120\001\002\000\006\010\uffaf\016\uffaf\001\002\000\006" +
    "\010\uffae\016\uffae\001\002\000\020\007\uff8d\017\uff8d\047" +
    "\uff8d\061\uff8d\062\uff8d\063\uff8d\064\uff8d\001\002\000\022" +
    "\007\147\010\266\017\140\047\136\061\142\062\146\063" +
    "\143\064\120\001\002\000\004\010\267\001\002\000\006" +
    "\010\uffb1\016\uffb1\001\002\000\006\010\uffb0\016\uffb0\001" +
    "\002\000\006\010\uffad\016\uffad\001\002\000\010\003\127" +
    "\016\uffb5\064\120\001\002\000\006\010\uffb6\016\uffb6\001" +
    "\002\000\004\016\274\001\002\000\022\007\147\016\uffb3" +
    "\017\140\047\136\061\142\062\146\063\143\064\120\001" +
    "\002\000\004\016\277\001\002\000\004\016\uffb4\001\002" +
    "\000\010\003\127\010\uffb5\064\120\001\002\000\004\010" +
    "\301\001\002\000\026\003\127\005\117\020\130\021\116" +
    "\022\132\027\124\030\122\032\131\037\134\064\120\001" +
    "\002\000\032\003\uffc4\005\uffc4\006\uffc4\020\uffc4\021\uffc4" +
    "\022\uffc4\027\uffc4\030\uffc4\032\uffc4\037\uffc4\060\uffc4\064" +
    "\uffc4\001\002\000\072\007\uff8e\010\uff8e\011\304\012\uff8e" +
    "\015\uff8e\016\uff8e\025\uff8e\026\uff8e\033\uff8e\034\uff8e\035" +
    "\uff8e\036\305\040\uff8e\041\uff8e\042\uff8e\043\uff8e\044\uff8e" +
    "\045\uff8e\046\uff8e\047\uff8e\050\uff8e\051\uff8e\052\uff8e\053" +
    "\uff8e\054\uff8e\055\uff8e\056\uff8e\057\uff8e\001\002\000\020" +
    "\007\147\017\140\047\136\061\142\062\146\063\143\064" +
    "\120\001\002\000\004\064\307\001\002\000\066\007\uff92" +
    "\010\uff92\012\uff92\015\uff92\016\uff92\025\uff92\026\uff92\033" +
    "\uff92\034\uff92\035\uff92\040\uff92\041\uff92\042\uff92\043\uff92" +
    "\044\uff92\045\uff92\046\uff92\047\uff92\050\uff92\051\uff92\052" +
    "\uff92\053\uff92\054\uff92\055\uff92\056\uff92\057\uff92\001\002" +
    "\000\072\007\uff91\010\uff91\011\uff91\012\uff91\015\uff91\016" +
    "\uff91\025\uff91\026\uff91\033\uff91\034\uff91\035\uff91\036\uff91" +
    "\040\uff91\041\uff91\042\uff91\043\uff91\044\uff91\045\uff91\046" +
    "\uff91\047\uff91\050\uff91\051\uff91\052\uff91\053\uff91\054\uff91" +
    "\055\uff91\056\uff91\057\uff91\001\002\000\072\007\uff8e\010" +
    "\uff8e\011\304\012\uff8e\015\uff8e\016\uff8e\025\uff8e\026\uff8e" +
    "\033\uff8e\034\uff8e\035\uff8e\036\305\040\uff8e\041\uff8e\042" +
    "\uff8e\043\uff8e\044\uff8e\045\uff8e\046\uff8e\047\uff8e\050\uff8e" +
    "\051\uff8e\052\uff8e\053\uff8e\054\uff8e\055\uff8e\056\uff8e\057" +
    "\uff8e\001\002\000\066\007\uff90\010\uff90\012\uff90\015\uff90" +
    "\016\uff90\025\uff90\026\uff90\033\uff90\034\uff90\035\uff90\040" +
    "\uff90\041\uff90\042\uff90\043\uff90\044\uff90\045\uff90\046\uff90" +
    "\047\uff90\050\uff90\051\uff90\052\uff90\053\uff90\054\uff90\055" +
    "\uff90\056\uff90\057\uff90\001\002\000\004\012\313\001\002" +
    "\000\072\007\uff8e\010\uff8e\011\304\012\uff8e\015\uff8e\016" +
    "\uff8e\025\uff8e\026\uff8e\033\uff8e\034\uff8e\035\uff8e\036\305" +
    "\040\uff8e\041\uff8e\042\uff8e\043\uff8e\044\uff8e\045\uff8e\046" +
    "\uff8e\047\uff8e\050\uff8e\051\uff8e\052\uff8e\053\uff8e\054\uff8e" +
    "\055\uff8e\056\uff8e\057\uff8e\001\002\000\066\007\uff8f\010" +
    "\uff8f\012\uff8f\015\uff8f\016\uff8f\025\uff8f\026\uff8f\033\uff8f" +
    "\034\uff8f\035\uff8f\040\uff8f\041\uff8f\042\uff8f\043\uff8f\044" +
    "\uff8f\045\uff8f\046\uff8f\047\uff8f\050\uff8f\051\uff8f\052\uff8f" +
    "\053\uff8f\054\uff8f\055\uff8f\056\uff8f\057\uff8f\001\002\000" +
    "\030\003\127\005\117\006\316\020\130\021\116\022\132" +
    "\027\124\030\122\032\131\037\134\064\120\001\002\000" +
    "\032\003\uffb9\005\uffb9\006\uffb9\020\uffb9\021\uffb9\022\uffb9" +
    "\027\uffb9\030\uffb9\032\uffb9\037\uffb9\060\uffb9\064\uffb9\001" +
    "\002\000\004\064\120\001\002\000\004\010\uffbd\001\002" +
    "\000\004\010\322\001\002\000\004\016\323\001\002\000" +
    "\032\003\uffbc\005\uffbc\006\uffbc\020\uffbc\021\uffbc\022\uffbc" +
    "\027\uffbc\030\uffbc\032\uffbc\037\uffbc\060\uffbc\064\uffbc\001" +
    "\002\000\004\064\013\001\002\000\004\010\uffcd\001\002" +
    "\000\010\010\uffcb\011\uffca\035\uffcb\001\002\000\004\011" +
    "\330\001\002\000\004\012\331\001\002\000\006\010\uffc9" +
    "\035\uffc9\001\002\000\004\005\uffdb\001\002\000\016\003" +
    "\uffef\005\uffef\006\uffef\023\uffef\024\uffef\064\uffef\001\002" +
    "\000\012\006\335\013\055\014\060\064\013\001\002\000" +
    "\004\002\000\001\002\000\006\003\340\064\342\001\002" +
    "\000\006\016\uffed\035\uffed\001\002\000\006\016\uffec\035" +
    "\uffec\001\002\000\006\016\346\035\345\001\002\000\010" +
    "\011\343\016\uffeb\035\uffeb\001\002\000\004\012\344\001" +
    "\002\000\006\016\uffea\035\uffea\001\002\000\004\064\342" +
    "\001\002\000\016\003\ufff0\005\ufff0\006\ufff0\023\ufff0\024" +
    "\ufff0\064\ufff0\001\002\000\006\016\uffee\035\uffee\001\002" +
    "\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\346\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\064\006\001\001\000\004\003\007" +
    "\001\001\000\014\004\015\013\013\023\014\026\017\063" +
    "\010\001\001\000\004\066\335\001\001\000\004\007\333" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\063\022\001\001\000\004\065" +
    "\023\001\001\000\006\030\024\031\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\030\035\031\025\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\070\040" +
    "\001\001\000\004\024\042\001\001\000\004\063\331\001" +
    "\001\000\002\001\001\000\004\016\044\001\001\000\010" +
    "\013\046\025\047\063\010\001\001\000\004\007\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\005\056\006\052\063\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\063\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\010\072\011" +
    "\070\012\071\063\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\074\001\001\000\006\017\076\063\077\001\001\000\004" +
    "\071\113\001\001\000\002\001\001\000\004\067\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\020\103" +
    "\021\105\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\020\107\021\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\114\001\001\000\012\032\124\036\125" +
    "\037\120\051\122\001\001\000\002\001\001\000\004\033" +
    "\314\001\001\000\004\076\302\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\053\257\057\256\062\255\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\044\136\046\143\050\144\051\140\074\147\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\046\214\050\144\051\140\001\001\000\004\073\212" +
    "\001\001\000\004\063\206\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\045\166\001\001" +
    "\000\004\047\153\001\001\000\002\001\001\000\012\044" +
    "\151\046\143\050\144\051\140\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\060\163\061\164\062\154\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\050\165\051\140\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\055\174\056\175\057\172\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\046\176\050\144\051\140" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\043" +
    "\200\044\201\046\143\050\144\051\140\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\043" +
    "\204\044\201\046\143\050\144\051\140\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\044" +
    "\210\046\143\050\144\051\140\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\045\215\001\001\000\010\055\174\056\175\057\172" +
    "\001\001\000\002\001\001\000\012\044\220\046\143\050" +
    "\144\051\140\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\040\232\041\234\042\233\044\231\046\143\050\144\051" +
    "\140\001\001\000\004\054\253\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\040\236\041" +
    "\234\042\233\044\231\046\143\050\144\051\140\001\001" +
    "\000\002\001\001\000\016\041\240\042\233\044\231\046" +
    "\143\050\144\051\140\001\001\000\002\001\001\000\012" +
    "\032\242\036\125\037\120\051\122\001\001\000\002\001" +
    "\001\000\012\032\244\036\125\037\120\051\122\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\044\254\046\143\050\144\051\140\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\044\267\046\143\050\144\051\140\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\043\264\044\201\046\143\050\144\051\140\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\034\272\036\271\037\120\051\122\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\035\274" +
    "\040\275\041\234\042\233\044\231\046\143\050\144\051" +
    "\140\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\034\277\036\271\037\120\051\122\001\001\000\002\001" +
    "\001\000\012\032\301\036\125\037\120\051\122\001\001" +
    "\000\002\001\001\000\004\052\305\001\001\000\012\044" +
    "\311\046\143\050\144\051\140\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\077\307\001\001\000\004\052" +
    "\310\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\052\313\001\001\000\002\001\001\000\012\032\124\036" +
    "\125\037\120\051\122\001\001\000\002\001\001\000\004" +
    "\051\317\001\001\000\004\075\320\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\011\324" +
    "\012\071\063\067\001\001\000\002\001\001\000\004\072" +
    "\326\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\005" +
    "\056\006\052\063\053\001\001\000\002\001\001\000\006" +
    "\014\340\015\336\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\346\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	Tab.init(); // Universe scope

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;

    }


	
	int printCallCount = 0;
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info (msg.toString());
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {


	CompilerImpl impl = new CompilerImpl();

  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // MulopRight ::= MODULE_EQUAL 
            {
              Object RESULT =null;
		 RESULT = new Integer(Code.rem); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // MulopRight ::= DIVIDE_EQUAL 
            {
              Object RESULT =null;
		 RESULT = new Integer(Code.div); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // MulopRight ::= TIMES_EQUAL 
            {
              Object RESULT =null;
		 RESULT = new Integer(Code.mul); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // MulopLeft ::= MODULE 
            {
              Object RESULT =null;
		 RESULT = new Integer(Code.rem); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // MulopLeft ::= DIVIDE 
            {
              Object RESULT =null;
		 RESULT = new Integer(Code.div); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // MulopLeft ::= TIMES 
            {
              Object RESULT =null;
		 RESULT = new Integer(Code.mul); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Mulop ::= MulopRight 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Mulop ::= MulopLeft 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // AddopRight ::= MINUS_EQUAL 
            {
              Object RESULT =null;
		 RESULT = new Integer(Code.sub); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopRight",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // AddopRight ::= PLUS_EQUAL 
            {
              Object RESULT =null;
		 RESULT = new Integer(Code.add); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopRight",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // AddopLeft ::= MINUS 
            {
              Object RESULT =null;
		 RESULT = new Integer(Code.sub); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopLeft",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // AddopLeft ::= PLUS 
            {
              Object RESULT =null;
		 RESULT = new Integer(Code.add); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopLeft",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Addop ::= AddopRight 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Addop ::= AddopLeft 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Relop ::= LOWER_EQUAL 
            {
              Object RESULT =null;
		 RESULT = new Integer(Code.le); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Relop ::= LOWER 
            {
              Object RESULT =null;
		 RESULT = new Integer(Code.lt); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Relop ::= GREATER_EQUAL 
            {
              Object RESULT =null;
		 RESULT = new Integer(Code.ge); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Relop ::= GREATER 
            {
              Object RESULT =null;
		 RESULT = new Integer(Code.gt); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Relop ::= IS_NOT_EQUAL 
            {
              Object RESULT =null;
		 RESULT = new Integer(Code.ne); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Relop ::= IS_EQUAL 
            {
              Object RESULT =null;
		 RESULT = new Integer(Code.eq); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Assignop ::= MulopRight 
            {
              Object RESULT =null;
		int mrleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int mrright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object mr = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = mr; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Assignop ::= AddopRight 
            {
              Object RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = ar; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Assignop ::= EQUALS 
            {
              Object RESULT =null;
		 RESULT = new Integer(0); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // DesignatorNesto ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorNesto",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // DesignatorNesto ::= LBRACKET Expr RBRACKET DesignatorNesto 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorNesto",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // DesignatorNesto ::= DOT IDENT NT$11 DesignatorNesto 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int identleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorNesto",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // NT$11 ::= 
            {
              Object RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 RESULT = ident; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$11",61, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Designator ::= IDENT NT$10 DesignatorNesto 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // NT$10 ::= 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 RESULT = impl.checkIfExists(name, nameleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$10",60, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Factor ::= LPAREN Expr RPAREN 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT = exp; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Factor ::= NEW Type LBRACKET Expr RBRACKET 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Factor ::= NEW Type 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Factor ::= BOOL_CONST 
            {
              Object RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Boolean bool = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = impl.factorInsertBool(bool); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Factor ::= CHAR_CONST 
            {
              Object RESULT =null;
		int chrleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int chrright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Character chr = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = impl.factorInsertChar(chr); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Factor ::= NUM_CONST 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = impl.factorInsertNum(num); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Factor ::= Designator LPAREN RPAREN 
            {
              Object RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object des = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT = impl.factorInsertFunc(des,desleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Factor ::= Designator LPAREN ActPars RPAREN 
            {
              Object RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Object des = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		 RESULT = impl.factorInsertFunc(des,desleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Factor ::= Designator 
            {
              Object RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int desright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object des = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = impl.factorInsertDesignator(des); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // MulopFactorList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopFactorList",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // MulopFactorList ::= MulopFactorList Mulop Factor 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopFactorList",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Term ::= Factor MulopFactorList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // AddopTermList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopTermList",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // AddopTermList ::= AddopTermList Addop Term 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopTermList",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Expr ::= Term AddopTermList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Expr ::= MINUS Term AddopTermList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CondFact ::= Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CondFact ::= Expr Relop Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CondTerm ::= CondFact 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CondTerm ::= CondFact AND CondTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Condition ::= CondTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Condition ::= CondTerm OR Condition 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ActPars ::= Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ActPars ::= Expr COMMA ActPars 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DesignatorAssignStatement ::= error 
            {
              Object RESULT =null;
		 parser.log.debug("Uspesan oporavak od greske pri dodeli vrednosti."); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorAssignStatement",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DesignatorAssignStatement ::= Designator Assignop Expr 
            {
              Object RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object des = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorAssignStatement",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DesignatorStatement ::= Designator DEC 
            {
              Object RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object des = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 impl.decrement(des,desleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // DesignatorStatement ::= Designator INC 
            {
              Object RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object des = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 impl.increment(des,desleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DesignatorStatement ::= Designator LPAREN ActPars RPAREN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DesignatorStatement ::= Designator LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DesignatorStatement ::= DesignatorAssignStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ForCondition ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ForCondition",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ForCondition ::= Condition 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ForCondition",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ForDesignatorStatement ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ForDesignatorStatement",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ForDesignatorStatement ::= DesignatorStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ForDesignatorStatement",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // StatementList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // StatementList ::= StatementList Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Statement ::= LBRACE StatementList RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Statement ::= PRINT LPAREN Expr RPAREN SEMI_COLON 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 
			  	parser.printCallCount++; 
			  	impl.print(e,eleft);
			  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Statement ::= PRINT LPAREN Expr COMMA NUM_CONST RPAREN SEMI_COLON 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 
			  	parser.printCallCount++; 
			  	impl.printN(exp,num,expleft);
			  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Statement ::= READ LPAREN Designator NT$9 RPAREN SEMI_COLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int desleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Object des = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$9 ::= 
            {
              Object RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int desright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object des = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 impl.read(des,desleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$9",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Statement ::= RETURN NT$8 SEMI_COLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$8 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 impl.checkReturn(null,aleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$8",58, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Statement ::= RETURN Expr NT$7 SEMI_COLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NT$7 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 impl.checkReturn(expr,aleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$7",57, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Statement ::= CONTINUE SEMI_COLON 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Statement ::= BREAK SEMI_COLON 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Statement ::= FOR LPAREN ForDesignatorStatement SEMI_COLON ForCondition SEMI_COLON ForDesignatorStatement RPAREN Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Statement ::= IF LPAREN Condition RPAREN Statement ELSE Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Statement ::= IF LPAREN Condition RPAREN Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Statement ::= DesignatorStatement SEMI_COLON 
            {
              Object RESULT =null;
		int semileft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Type ::= IDENT 
            {
              Struct RESULT =null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String typeName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = impl.getType(typeName,typeNameleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Type",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // FormPar ::= Type IDENT NT$6 LBRACKET RBRACKET 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int formTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int formTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Struct formType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int formVarleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int formVarright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		String formVar = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPar",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$6 ::= 
            {
              Object RESULT =null;
		int formTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int formTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct formType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int formVarleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int formVarright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String formVar = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 impl.insertMethodArg(formType, formVar, formVarleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$6",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FormPar ::= Type IDENT 
            {
              Object RESULT =null;
		int formTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int formTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct formType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int formVarleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int formVarright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String formVar = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 impl.insertMethodArg(formType, formVar, formVarleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPar",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FormPars ::= FormPar 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FormPars ::= FormPar COMMA FormPars 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // MethodFormPars ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodFormPars",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // MethodFormPars ::= FormPars 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodFormPars",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // MethodDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // MethodDeclList ::= MethodDeclList MethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // MethodReturnType ::= STATIC VOID IDENT 
            {
              Object RESULT =null;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 impl.insertMethod(null,methName,methNameleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodReturnType",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // MethodReturnType ::= VOID IDENT 
            {
              Object RESULT =null;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 impl.insertMethod(null,methName,methNameleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodReturnType",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // MethodReturnType ::= STATIC Type IDENT 
            {
              Object RESULT =null;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 impl.insertMethod(retType,methName,methNameleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodReturnType",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // MethodReturnType ::= Type IDENT 
            {
              Object RESULT =null;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 impl.insertMethod(retType,methName,methNameleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodReturnType",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // MethodDecl ::= MethodReturnType LPAREN MethodFormPars RPAREN LocalVarDeclList LBRACE NT$5 StatementList RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 impl.endMethod(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$5 ::= 
            {
              Object RESULT =null;
 impl.startMethod(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$5",55, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ClassMethods ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethods",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ClassMethods ::= LBRACE MethodDeclList RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethods",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ExtendsType ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExtendsType",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ExtendsType ::= EXTENDS Type 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExtendsType",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ClassDecl ::= CLASS IDENT NT$4 ExtendsType LBRACE VarDeclList ClassMethods RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
		 impl.endClass(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$4 ::= 
            {
              Object RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 impl.insertClass(className,classNameleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$4",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LocalVarDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclList",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LocalVarDeclList ::= LocalVarDeclList LocalVarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclList",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LocalVarPar ::= IDENT LBRACKET RBRACKET 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 impl.insertLocalArray(varName,varNameleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarPar",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LocalVarPar ::= IDENT 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 impl.insertLocalVar(varName,varNameleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarPar",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LocalVarDecls ::= LocalVarPar 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDecls",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LocalVarDecls ::= LocalVarPar COMMA LocalVarDecls 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDecls",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LocalVarDecl ::= error 
            {
              Object RESULT =null;
		 parser.log.debug("Uspesan oporavak od greske pri deklarisanju lokalne promenljive."); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDecl",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LocalVarDecl ::= error SEMI_COLON 
            {
              Object RESULT =null;
		 parser.log.debug("Uspesan oporavak od greske pri deklarisanju lokalne promenljive."); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDecl",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LocalVarDecl ::= Type NT$3 LocalVarDecls SEMI_COLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int varTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int varTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct varType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDecl",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$3 ::= 
            {
              Object RESULT =null;
		int varTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct varType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 impl.setType(varType); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$3",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VarDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclList",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VarDeclList ::= VarDeclList VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclList",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VarPar ::= IDENT LBRACKET RBRACKET 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 impl.insertGlobalArray(varName,varNameleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarPar",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VarPar ::= IDENT 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 impl.insertGlobalVar(varName,varNameleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarPar",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VarDecls ::= error 
            {
              Object RESULT =null;
		 parser.log.debug("Uspesan oporavak od greske pri deklarisanju globalne promenljive."); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecls",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VarDecls ::= VarPar 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecls",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VarDecls ::= VarDecls COMMA VarPar 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecls",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VarDecl ::= error SEMI_COLON 
            {
              Object RESULT =null;
		 parser.log.debug("Uspesan oporavak od greske pri deklarisanju globalne promenljive."); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VarDecl ::= Type NT$2 VarDecls SEMI_COLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$2 ::= 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 impl.setType(type); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$2",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ConstDecls ::= ConstPar 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecls",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ConstDecls ::= ConstPar COMMA ConstDecls 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecls",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ConstPar ::= IDENT EQUALS Const 
            {
              Object RESULT =null;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int constValueleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int constValueright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object constValue = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 impl.insertConstant(constName,constValue,constNameleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstPar",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Const ::= CHAR_CONST 
            {
              Object RESULT =null;
		int chrleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int chrright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Character chr = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = chr; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Const",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Const ::= BOOL_CONST 
            {
              Object RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Boolean bool = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = bool; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Const",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Const ::= NUM_CONST 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = num; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Const",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ConstDecl ::= CONST Type NT$1 ConstDecls SEMI_COLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int constTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int constTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct constType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$1 ::= 
            {
              Object RESULT =null;
		int constTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int constTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct constType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 impl.setType(constType); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$1",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Decls ::= ClassDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Decls",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Decls ::= VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Decls",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Decls ::= ConstDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Decls",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclList",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DeclList ::= DeclList Decls 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclList",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= PROGRAM IDENT NT$0 DeclList LBRACE MethodDeclList RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int programNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int programNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		String programName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		 impl.endProgram(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT =null;
		int programNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int programNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String programName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 impl.startProgram(programName); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$0",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

